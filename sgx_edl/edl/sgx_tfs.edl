// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    untrusted {
        void *u_sgxfs_open_ocall([out] int32_t *error, [in, string] const char *filename, uint8_t read_only, [out] int64_t *file_size);
        uint8_t u_sgxfs_read_ocall([out] int32_t *error,
                                   [user_check] void *file,
                                   uint64_t node_number,
                                   [out, size=node_size] uint8_t *node,
                                   uint32_t node_size);
        uint8_t u_sgxfs_write_ocall([out] int32_t *error,
                                    [user_check] void *file,
                                    uint64_t node_number,
                                    [in, size=node_size] uint8_t *node,
                                    uint32_t node_size);
        uint8_t u_sgxfs_flush_ocall([out] int32_t *error, [user_check] void *file);
        uint8_t u_sgxfs_close_ocall([out] int32_t *error, [user_check] void *file);

        void *u_sgxfs_open_recovery_ocall([out] int32_t *error, [in, string] const char *filename);
        uint8_t u_sgxfs_write_recovery_ocall([out] int32_t *error,
                                             [user_check] void *file,
                                             [in, size=data_size] uint8_t *data,
                                             uint32_t data_size);
        uint8_t u_sgxfs_close_recovery_ocall([out] int32_t *error, [user_check] void *file);

        uint8_t u_sgxfs_exists_ocall([out] int32_t *error, [in, string] const char *filename);
        uint8_t u_sgxfs_remove_ocall([out] int32_t *error, [in, string] const char *filename);
        uint8_t u_sgxfs_recovery_ocall([out] int32_t *error,
                                       [in, string] const char *filename,
                                       [in, string] const char *recovery_filename,
                                       uint32_t node_size);
    };
};
